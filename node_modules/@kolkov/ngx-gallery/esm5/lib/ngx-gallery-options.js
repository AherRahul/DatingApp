import { NgxGalleryAction } from './ngx-gallery-action';
import { NgxGalleryOrder } from './ngx-gallery-order';
import { NgxGalleryLayout } from './ngx-gallery-layout';
import { NgxGalleryAnimation } from './ngx-gallery-animation';
import { NgxGalleryImageSize } from './ngx-gallery-image-size';
var NgxGalleryOptions = /** @class */ (function () {
    function NgxGalleryOptions(obj) {
        var preventDefaults = obj.breakpoint === undefined ? false : true;
        function use(source, defaultValue) {
            return obj && (source !== undefined || preventDefaults) ? source : defaultValue;
        }
        this.breakpoint = use(obj.breakpoint, undefined);
        this.width = use(obj.width, '500px');
        this.height = use(obj.height, '400px');
        this.fullWidth = use(obj.fullWidth, false);
        this.layout = use(obj.layout, NgxGalleryLayout.ThumbnailsBottom);
        this.startIndex = use(obj.startIndex, 0);
        this.linkTarget = use(obj.linkTarget, '_blank');
        this.lazyLoading = use(obj.lazyLoading, true);
        this.image = use(obj.image, true);
        this.imagePercent = use(obj.imagePercent, 75);
        this.imageArrows = use(obj.imageArrows, true);
        this.imageArrowsAutoHide = use(obj.imageArrowsAutoHide, false);
        this.imageSwipe = use(obj.imageSwipe, false);
        this.imageAnimation = use(obj.imageAnimation, NgxGalleryAnimation.Fade);
        this.imageSize = use(obj.imageSize, NgxGalleryImageSize.Cover);
        this.imageAutoPlay = use(obj.imageAutoPlay, false);
        this.imageAutoPlayInterval = use(obj.imageAutoPlayInterval, 2000);
        this.imageAutoPlayPauseOnHover = use(obj.imageAutoPlayPauseOnHover, false);
        this.imageInfinityMove = use(obj.imageInfinityMove, false);
        if (obj && obj.imageActions && obj.imageActions.length) {
            obj.imageActions = obj.imageActions.map(function (action) { return new NgxGalleryAction(action); });
        }
        this.imageActions = use(obj.imageActions, []);
        this.imageDescription = use(obj.imageDescription, false);
        this.imageBullets = use(obj.imageBullets, false);
        this.thumbnails = use(obj.thumbnails, true);
        this.thumbnailsColumns = use(obj.thumbnailsColumns, 4);
        this.thumbnailsRows = use(obj.thumbnailsRows, 1);
        this.thumbnailsPercent = use(obj.thumbnailsPercent, 25);
        this.thumbnailsMargin = use(obj.thumbnailsMargin, 10);
        this.thumbnailsArrows = use(obj.thumbnailsArrows, true);
        this.thumbnailsArrowsAutoHide = use(obj.thumbnailsArrowsAutoHide, false);
        this.thumbnailsSwipe = use(obj.thumbnailsSwipe, false);
        this.thumbnailsMoveSize = use(obj.thumbnailsMoveSize, 1);
        this.thumbnailsOrder = use(obj.thumbnailsOrder, NgxGalleryOrder.Column);
        this.thumbnailsRemainingCount = use(obj.thumbnailsRemainingCount, false);
        this.thumbnailsAsLinks = use(obj.thumbnailsAsLinks, false);
        this.thumbnailsAutoHide = use(obj.thumbnailsAutoHide, false);
        this.thumbnailMargin = use(obj.thumbnailMargin, 10);
        this.thumbnailSize = use(obj.thumbnailSize, NgxGalleryImageSize.Cover);
        if (obj && obj.thumbnailActions && obj.thumbnailActions.length) {
            obj.thumbnailActions = obj.thumbnailActions.map(function (action) { return new NgxGalleryAction(action); });
        }
        this.thumbnailActions = use(obj.thumbnailActions, []);
        this.preview = use(obj.preview, true);
        this.previewDescription = use(obj.previewDescription, true);
        this.previewArrows = use(obj.previewArrows, true);
        this.previewArrowsAutoHide = use(obj.previewArrowsAutoHide, false);
        this.previewSwipe = use(obj.previewSwipe, false);
        this.previewFullscreen = use(obj.previewFullscreen, false);
        this.previewForceFullscreen = use(obj.previewForceFullscreen, false);
        this.previewCloseOnClick = use(obj.previewCloseOnClick, false);
        this.previewCloseOnEsc = use(obj.previewCloseOnEsc, false);
        this.previewKeyboardNavigation = use(obj.previewKeyboardNavigation, false);
        this.previewAnimation = use(obj.previewAnimation, true);
        this.previewAutoPlay = use(obj.previewAutoPlay, false);
        this.previewAutoPlayInterval = use(obj.previewAutoPlayInterval, 2000);
        this.previewAutoPlayPauseOnHover = use(obj.previewAutoPlayPauseOnHover, false);
        this.previewInfinityMove = use(obj.previewInfinityMove, false);
        this.previewZoom = use(obj.previewZoom, false);
        this.previewZoomStep = use(obj.previewZoomStep, 0.1);
        this.previewZoomMax = use(obj.previewZoomMax, 2);
        this.previewZoomMin = use(obj.previewZoomMin, 0.5);
        this.previewRotate = use(obj.previewRotate, false);
        this.previewDownload = use(obj.previewDownload, false);
        this.previewCustom = use(obj.previewCustom, undefined);
        this.previewBullets = use(obj.previewBullets, false);
        this.arrowPrevIcon = use(obj.arrowPrevIcon, 'fa fa-arrow-circle-left');
        this.arrowNextIcon = use(obj.arrowNextIcon, 'fa fa-arrow-circle-right');
        this.closeIcon = use(obj.closeIcon, 'fa fa-times-circle');
        this.fullscreenIcon = use(obj.fullscreenIcon, 'fa fa-arrows-alt');
        this.spinnerIcon = use(obj.spinnerIcon, 'fa fa-spinner fa-pulse fa-3x fa-fw');
        this.zoomInIcon = use(obj.zoomInIcon, 'fa fa-search-plus');
        this.zoomOutIcon = use(obj.zoomOutIcon, 'fa fa-search-minus');
        this.rotateLeftIcon = use(obj.rotateLeftIcon, 'fa fa-undo');
        this.rotateRightIcon = use(obj.rotateRightIcon, 'fa fa-repeat');
        this.downloadIcon = use(obj.downloadIcon, 'fa fa-arrow-circle-down');
        if (obj && obj.actions && obj.actions.length) {
            obj.actions = obj.actions.map(function (action) { return new NgxGalleryAction(action); });
        }
        this.actions = use(obj.actions, []);
    }
    return NgxGalleryOptions;
}());
export { NgxGalleryOptions };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWdhbGxlcnktb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Brb2xrb3Yvbmd4LWdhbGxlcnkvIiwic291cmNlcyI6WyJsaWIvbmd4LWdhbGxlcnktb3B0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUE2RTdEO0lBMEVJLDJCQUFZLEdBQXVCO1FBRS9CLElBQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUVwRSxTQUFTLEdBQUcsQ0FBSSxNQUFTLEVBQUUsWUFBZTtZQUN0QyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ3BGLENBQUM7UUFFRCxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNELElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUU7WUFDcEQsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLEVBQTVCLENBQTRCLENBQUMsQ0FBQztTQUNuRjtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkUsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLGdCQUFnQixJQUFJLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7WUFDNUQsR0FBRyxDQUFDLGdCQUFnQixHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUM7U0FDM0Y7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV0RCxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMscUJBQXFCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRSxJQUFJLENBQUMsbUJBQW1CLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMseUJBQXlCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQywyQkFBMkIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9ELElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLGVBQWUsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsYUFBYSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLHlCQUF5QixDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBQ3hFLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDbEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUVyRSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUE1QixDQUE0QixDQUFDLENBQUM7U0FDekU7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUF6S0QsSUF5S0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05neEdhbGxlcnlBY3Rpb259IGZyb20gJy4vbmd4LWdhbGxlcnktYWN0aW9uJztcclxuaW1wb3J0IHtOZ3hHYWxsZXJ5T3JkZXJ9IGZyb20gJy4vbmd4LWdhbGxlcnktb3JkZXInO1xyXG5pbXBvcnQge05neEdhbGxlcnlMYXlvdXR9IGZyb20gJy4vbmd4LWdhbGxlcnktbGF5b3V0JztcclxuaW1wb3J0IHtOZ3hHYWxsZXJ5QW5pbWF0aW9ufSBmcm9tICcuL25neC1nYWxsZXJ5LWFuaW1hdGlvbic7XHJcbmltcG9ydCB7Tmd4R2FsbGVyeUltYWdlU2l6ZX0gZnJvbSAnLi9uZ3gtZ2FsbGVyeS1pbWFnZS1zaXplJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU5neEdhbGxlcnlPcHRpb25zIHtcclxuICAgIHdpZHRoPzogc3RyaW5nO1xyXG4gICAgaGVpZ2h0Pzogc3RyaW5nO1xyXG4gICAgYnJlYWtwb2ludD86IG51bWJlcjtcclxuICAgIGZ1bGxXaWR0aD86IGJvb2xlYW47XHJcbiAgICBsYXlvdXQ/OiBzdHJpbmc7XHJcbiAgICBzdGFydEluZGV4PzogbnVtYmVyO1xyXG4gICAgbGlua1RhcmdldD86IHN0cmluZztcclxuICAgIGxhenlMb2FkaW5nPzogYm9vbGVhbjtcclxuICAgIGltYWdlPzogYm9vbGVhbjtcclxuICAgIGltYWdlUGVyY2VudD86IG51bWJlcjtcclxuICAgIGltYWdlQXJyb3dzPzogYm9vbGVhbjtcclxuICAgIGltYWdlQXJyb3dzQXV0b0hpZGU/OiBib29sZWFuO1xyXG4gICAgaW1hZ2VTd2lwZT86IGJvb2xlYW47XHJcbiAgICBpbWFnZUFuaW1hdGlvbj86IHN0cmluZztcclxuICAgIGltYWdlU2l6ZT86IHN0cmluZztcclxuICAgIGltYWdlQXV0b1BsYXk/OiBib29sZWFuO1xyXG4gICAgaW1hZ2VBdXRvUGxheUludGVydmFsPzogbnVtYmVyO1xyXG4gICAgaW1hZ2VBdXRvUGxheVBhdXNlT25Ib3Zlcj86IGJvb2xlYW47XHJcbiAgICBpbWFnZUluZmluaXR5TW92ZT86IGJvb2xlYW47XHJcbiAgICBpbWFnZUFjdGlvbnM/OiBOZ3hHYWxsZXJ5QWN0aW9uW107XHJcbiAgICBpbWFnZURlc2NyaXB0aW9uPzogYm9vbGVhbjtcclxuICAgIGltYWdlQnVsbGV0cz86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxzPzogYm9vbGVhbjtcclxuICAgIHRodW1ibmFpbHNDb2x1bW5zPzogbnVtYmVyO1xyXG4gICAgdGh1bWJuYWlsc1Jvd3M/OiBudW1iZXI7XHJcbiAgICB0aHVtYm5haWxzUGVyY2VudD86IG51bWJlcjtcclxuICAgIHRodW1ibmFpbHNNYXJnaW4/OiBudW1iZXI7XHJcbiAgICB0aHVtYm5haWxzQXJyb3dzPzogYm9vbGVhbjtcclxuICAgIHRodW1ibmFpbHNBcnJvd3NBdXRvSGlkZT86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxzU3dpcGU/OiBib29sZWFuO1xyXG4gICAgdGh1bWJuYWlsc01vdmVTaXplPzogbnVtYmVyO1xyXG4gICAgdGh1bWJuYWlsc09yZGVyPzogTmd4R2FsbGVyeU9yZGVyO1xyXG4gICAgdGh1bWJuYWlsc1JlbWFpbmluZ0NvdW50PzogYm9vbGVhbjtcclxuICAgIHRodW1ibmFpbHNBc0xpbmtzPzogYm9vbGVhbjtcclxuICAgIHRodW1ibmFpbHNBdXRvSGlkZT86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxNYXJnaW4/OiBudW1iZXI7XHJcbiAgICB0aHVtYm5haWxTaXplPzogc3RyaW5nO1xyXG4gICAgdGh1bWJuYWlsQWN0aW9ucz86IE5neEdhbGxlcnlBY3Rpb25bXTtcclxuICAgIHByZXZpZXc/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0Rlc2NyaXB0aW9uPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdBcnJvd3M/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0Fycm93c0F1dG9IaWRlPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdTd2lwZT86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3RnVsbHNjcmVlbj86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3Rm9yY2VGdWxsc2NyZWVuPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdDbG9zZU9uQ2xpY2s/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0Nsb3NlT25Fc2M/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0tleWJvYXJkTmF2aWdhdGlvbj86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3QW5pbWF0aW9uPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdBdXRvUGxheT86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3QXV0b1BsYXlJbnRlcnZhbD86IG51bWJlcjtcclxuICAgIHByZXZpZXdBdXRvUGxheVBhdXNlT25Ib3Zlcj86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3SW5maW5pdHlNb3ZlPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdab29tPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdab29tU3RlcD86IG51bWJlcjtcclxuICAgIHByZXZpZXdab29tTWF4PzogbnVtYmVyO1xyXG4gICAgcHJldmlld1pvb21NaW4/OiBudW1iZXI7XHJcbiAgICBwcmV2aWV3Um90YXRlPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdEb3dubG9hZD86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3Q3VzdG9tPzogKGluZGV4OiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgICBwcmV2aWV3QnVsbGV0cz86IGJvb2xlYW47XHJcbiAgICBhcnJvd1ByZXZJY29uPzogc3RyaW5nO1xyXG4gICAgYXJyb3dOZXh0SWNvbj86IHN0cmluZztcclxuICAgIGNsb3NlSWNvbj86IHN0cmluZztcclxuICAgIGZ1bGxzY3JlZW5JY29uPzogc3RyaW5nO1xyXG4gICAgc3Bpbm5lckljb24/OiBzdHJpbmc7XHJcbiAgICB6b29tSW5JY29uPzogc3RyaW5nO1xyXG4gICAgem9vbU91dEljb24/OiBzdHJpbmc7XHJcbiAgICByb3RhdGVMZWZ0SWNvbj86IHN0cmluZztcclxuICAgIHJvdGF0ZVJpZ2h0SWNvbj86IHN0cmluZztcclxuICAgIGRvd25sb2FkSWNvbj86IHN0cmluZztcclxuICAgIGFjdGlvbnM/OiBOZ3hHYWxsZXJ5QWN0aW9uW107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOZ3hHYWxsZXJ5T3B0aW9ucyBpbXBsZW1lbnRzIElOZ3hHYWxsZXJ5T3B0aW9ucyB7XHJcbiAgICB3aWR0aD86IHN0cmluZztcclxuICAgIGhlaWdodD86IHN0cmluZztcclxuICAgIGJyZWFrcG9pbnQ/OiBudW1iZXI7XHJcbiAgICBmdWxsV2lkdGg/OiBib29sZWFuO1xyXG4gICAgbGF5b3V0Pzogc3RyaW5nO1xyXG4gICAgc3RhcnRJbmRleD86IG51bWJlcjtcclxuICAgIGxpbmtUYXJnZXQ/OiBzdHJpbmc7XHJcbiAgICBsYXp5TG9hZGluZz86IGJvb2xlYW47XHJcbiAgICBpbWFnZT86IGJvb2xlYW47XHJcbiAgICBpbWFnZVBlcmNlbnQ/OiBudW1iZXI7XHJcbiAgICBpbWFnZUFycm93cz86IGJvb2xlYW47XHJcbiAgICBpbWFnZUFycm93c0F1dG9IaWRlPzogYm9vbGVhbjtcclxuICAgIGltYWdlU3dpcGU/OiBib29sZWFuO1xyXG4gICAgaW1hZ2VBbmltYXRpb24/OiBzdHJpbmc7XHJcbiAgICBpbWFnZVNpemU/OiBzdHJpbmc7XHJcbiAgICBpbWFnZUF1dG9QbGF5PzogYm9vbGVhbjtcclxuICAgIGltYWdlQXV0b1BsYXlJbnRlcnZhbD86IG51bWJlcjtcclxuICAgIGltYWdlQXV0b1BsYXlQYXVzZU9uSG92ZXI/OiBib29sZWFuO1xyXG4gICAgaW1hZ2VJbmZpbml0eU1vdmU/OiBib29sZWFuO1xyXG4gICAgaW1hZ2VBY3Rpb25zPzogTmd4R2FsbGVyeUFjdGlvbltdO1xyXG4gICAgaW1hZ2VEZXNjcmlwdGlvbj86IGJvb2xlYW47XHJcbiAgICBpbWFnZUJ1bGxldHM/OiBib29sZWFuO1xyXG4gICAgdGh1bWJuYWlscz86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxzQ29sdW1ucz86IG51bWJlcjtcclxuICAgIHRodW1ibmFpbHNSb3dzPzogbnVtYmVyO1xyXG4gICAgdGh1bWJuYWlsc1BlcmNlbnQ/OiBudW1iZXI7XHJcbiAgICB0aHVtYm5haWxzTWFyZ2luPzogbnVtYmVyO1xyXG4gICAgdGh1bWJuYWlsc0Fycm93cz86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxzQXJyb3dzQXV0b0hpZGU/OiBib29sZWFuO1xyXG4gICAgdGh1bWJuYWlsc1N3aXBlPzogYm9vbGVhbjtcclxuICAgIHRodW1ibmFpbHNNb3ZlU2l6ZT86IG51bWJlcjtcclxuICAgIHRodW1ibmFpbHNPcmRlcj86IE5neEdhbGxlcnlPcmRlcjtcclxuICAgIHRodW1ibmFpbHNSZW1haW5pbmdDb3VudD86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxzQXNMaW5rcz86IGJvb2xlYW47XHJcbiAgICB0aHVtYm5haWxzQXV0b0hpZGU/OiBib29sZWFuO1xyXG4gICAgdGh1bWJuYWlsTWFyZ2luPzogbnVtYmVyO1xyXG4gICAgdGh1bWJuYWlsU2l6ZT86IHN0cmluZztcclxuICAgIHRodW1ibmFpbEFjdGlvbnM/OiBOZ3hHYWxsZXJ5QWN0aW9uW107XHJcbiAgICBwcmV2aWV3PzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdEZXNjcmlwdGlvbj86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3QXJyb3dzPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdBcnJvd3NBdXRvSGlkZT86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3U3dpcGU/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0Z1bGxzY3JlZW4/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0ZvcmNlRnVsbHNjcmVlbj86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3Q2xvc2VPbkNsaWNrPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdDbG9zZU9uRXNjPzogYm9vbGVhbjtcclxuICAgIHByZXZpZXdLZXlib2FyZE5hdmlnYXRpb24/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0FuaW1hdGlvbj86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3QXV0b1BsYXk/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0F1dG9QbGF5SW50ZXJ2YWw/OiBudW1iZXI7XHJcbiAgICBwcmV2aWV3QXV0b1BsYXlQYXVzZU9uSG92ZXI/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0luZmluaXR5TW92ZT86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3Wm9vbT86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3Wm9vbVN0ZXA/OiBudW1iZXI7XHJcbiAgICBwcmV2aWV3Wm9vbU1heD86IG51bWJlcjtcclxuICAgIHByZXZpZXdab29tTWluPzogbnVtYmVyO1xyXG4gICAgcHJldmlld1JvdGF0ZT86IGJvb2xlYW47XHJcbiAgICBwcmV2aWV3RG93bmxvYWQ/OiBib29sZWFuO1xyXG4gICAgcHJldmlld0N1c3RvbT86IChpbmRleDogbnVtYmVyKSA9PiB2b2lkO1xyXG4gICAgcHJldmlld0J1bGxldHM/OiBib29sZWFuO1xyXG4gICAgYXJyb3dQcmV2SWNvbj86IHN0cmluZztcclxuICAgIGFycm93TmV4dEljb24/OiBzdHJpbmc7XHJcbiAgICBjbG9zZUljb24/OiBzdHJpbmc7XHJcbiAgICBmdWxsc2NyZWVuSWNvbj86IHN0cmluZztcclxuICAgIHNwaW5uZXJJY29uPzogc3RyaW5nO1xyXG4gICAgem9vbUluSWNvbj86IHN0cmluZztcclxuICAgIHpvb21PdXRJY29uPzogc3RyaW5nO1xyXG4gICAgcm90YXRlTGVmdEljb24/OiBzdHJpbmc7XHJcbiAgICByb3RhdGVSaWdodEljb24/OiBzdHJpbmc7XHJcbiAgICBkb3dubG9hZEljb24/OiBzdHJpbmc7XHJcbiAgICBhY3Rpb25zPzogTmd4R2FsbGVyeUFjdGlvbltdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG9iajogSU5neEdhbGxlcnlPcHRpb25zKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHByZXZlbnREZWZhdWx0cyA9IG9iai5icmVha3BvaW50ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IHRydWU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVzZTxUPihzb3VyY2U6IFQsIGRlZmF1bHRWYWx1ZTogVCk6IFQge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIChzb3VyY2UgIT09IHVuZGVmaW5lZCB8fCBwcmV2ZW50RGVmYXVsdHMpID8gc291cmNlIDogZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5icmVha3BvaW50ID0gdXNlKG9iai5icmVha3BvaW50LCB1bmRlZmluZWQpO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB1c2Uob2JqLndpZHRoLCAnNTAwcHgnKTtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHVzZShvYmouaGVpZ2h0LCAnNDAwcHgnKTtcclxuICAgICAgICB0aGlzLmZ1bGxXaWR0aCA9IHVzZShvYmouZnVsbFdpZHRoLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5sYXlvdXQgPSB1c2Uob2JqLmxheW91dCwgTmd4R2FsbGVyeUxheW91dC5UaHVtYm5haWxzQm90dG9tKTtcclxuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB1c2Uob2JqLnN0YXJ0SW5kZXgsIDApO1xyXG4gICAgICAgIHRoaXMubGlua1RhcmdldCA9IHVzZShvYmoubGlua1RhcmdldCwgJ19ibGFuaycpO1xyXG4gICAgICAgIHRoaXMubGF6eUxvYWRpbmcgPSB1c2Uob2JqLmxhenlMb2FkaW5nLCB0cnVlKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IHVzZShvYmouaW1hZ2UsIHRydWUpO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VQZXJjZW50ID0gdXNlKG9iai5pbWFnZVBlcmNlbnQsIDc1KTtcclxuICAgICAgICB0aGlzLmltYWdlQXJyb3dzID0gdXNlKG9iai5pbWFnZUFycm93cywgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUFycm93c0F1dG9IaWRlID0gdXNlKG9iai5pbWFnZUFycm93c0F1dG9IaWRlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZVN3aXBlID0gdXNlKG9iai5pbWFnZVN3aXBlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUFuaW1hdGlvbiA9IHVzZShvYmouaW1hZ2VBbmltYXRpb24sIE5neEdhbGxlcnlBbmltYXRpb24uRmFkZSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZVNpemUgPSB1c2Uob2JqLmltYWdlU2l6ZSwgTmd4R2FsbGVyeUltYWdlU2l6ZS5Db3Zlcik7XHJcbiAgICAgICAgdGhpcy5pbWFnZUF1dG9QbGF5ID0gdXNlKG9iai5pbWFnZUF1dG9QbGF5LCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUF1dG9QbGF5SW50ZXJ2YWwgPSB1c2Uob2JqLmltYWdlQXV0b1BsYXlJbnRlcnZhbCwgMjAwMCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUF1dG9QbGF5UGF1c2VPbkhvdmVyID0gdXNlKG9iai5pbWFnZUF1dG9QbGF5UGF1c2VPbkhvdmVyLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUluZmluaXR5TW92ZSA9IHVzZShvYmouaW1hZ2VJbmZpbml0eU1vdmUsIGZhbHNlKTtcclxuICAgICAgICBpZiAob2JqICYmIG9iai5pbWFnZUFjdGlvbnMgJiYgb2JqLmltYWdlQWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb2JqLmltYWdlQWN0aW9ucyA9IG9iai5pbWFnZUFjdGlvbnMubWFwKGFjdGlvbiA9PiBuZXcgTmd4R2FsbGVyeUFjdGlvbihhY3Rpb24pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbWFnZUFjdGlvbnMgPSB1c2Uob2JqLmltYWdlQWN0aW9ucywgW10pO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VEZXNjcmlwdGlvbiA9IHVzZShvYmouaW1hZ2VEZXNjcmlwdGlvbiwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VCdWxsZXRzID0gdXNlKG9iai5pbWFnZUJ1bGxldHMsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy50aHVtYm5haWxzID0gdXNlKG9iai50aHVtYm5haWxzLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnRodW1ibmFpbHNDb2x1bW5zID0gdXNlKG9iai50aHVtYm5haWxzQ29sdW1ucywgNCk7XHJcbiAgICAgICAgdGhpcy50aHVtYm5haWxzUm93cyA9IHVzZShvYmoudGh1bWJuYWlsc1Jvd3MsIDEpO1xyXG4gICAgICAgIHRoaXMudGh1bWJuYWlsc1BlcmNlbnQgPSB1c2Uob2JqLnRodW1ibmFpbHNQZXJjZW50LCAyNSk7XHJcbiAgICAgICAgdGhpcy50aHVtYm5haWxzTWFyZ2luID0gdXNlKG9iai50aHVtYm5haWxzTWFyZ2luLCAxMCk7XHJcbiAgICAgICAgdGhpcy50aHVtYm5haWxzQXJyb3dzID0gdXNlKG9iai50aHVtYm5haWxzQXJyb3dzLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnRodW1ibmFpbHNBcnJvd3NBdXRvSGlkZSA9IHVzZShvYmoudGh1bWJuYWlsc0Fycm93c0F1dG9IaWRlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy50aHVtYm5haWxzU3dpcGUgPSB1c2Uob2JqLnRodW1ibmFpbHNTd2lwZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGh1bWJuYWlsc01vdmVTaXplID0gdXNlKG9iai50aHVtYm5haWxzTW92ZVNpemUsIDEpO1xyXG4gICAgICAgIHRoaXMudGh1bWJuYWlsc09yZGVyID0gdXNlKG9iai50aHVtYm5haWxzT3JkZXIsIE5neEdhbGxlcnlPcmRlci5Db2x1bW4pO1xyXG4gICAgICAgIHRoaXMudGh1bWJuYWlsc1JlbWFpbmluZ0NvdW50ID0gdXNlKG9iai50aHVtYm5haWxzUmVtYWluaW5nQ291bnQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnRodW1ibmFpbHNBc0xpbmtzID0gdXNlKG9iai50aHVtYm5haWxzQXNMaW5rcywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGh1bWJuYWlsc0F1dG9IaWRlID0gdXNlKG9iai50aHVtYm5haWxzQXV0b0hpZGUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnRodW1ibmFpbE1hcmdpbiA9IHVzZShvYmoudGh1bWJuYWlsTWFyZ2luLCAxMCk7XHJcbiAgICAgICAgdGhpcy50aHVtYm5haWxTaXplID0gdXNlKG9iai50aHVtYm5haWxTaXplLCBOZ3hHYWxsZXJ5SW1hZ2VTaXplLkNvdmVyKTtcclxuICAgICAgICBpZiAob2JqICYmIG9iai50aHVtYm5haWxBY3Rpb25zICYmIG9iai50aHVtYm5haWxBY3Rpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBvYmoudGh1bWJuYWlsQWN0aW9ucyA9IG9iai50aHVtYm5haWxBY3Rpb25zLm1hcChhY3Rpb24gPT4gbmV3IE5neEdhbGxlcnlBY3Rpb24oYWN0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGh1bWJuYWlsQWN0aW9ucyA9IHVzZShvYmoudGh1bWJuYWlsQWN0aW9ucywgW10pO1xyXG5cclxuICAgICAgICB0aGlzLnByZXZpZXcgPSB1c2Uob2JqLnByZXZpZXcsIHRydWUpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0Rlc2NyaXB0aW9uID0gdXNlKG9iai5wcmV2aWV3RGVzY3JpcHRpb24sIHRydWUpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0Fycm93cyA9IHVzZShvYmoucHJldmlld0Fycm93cywgdHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3QXJyb3dzQXV0b0hpZGUgPSB1c2Uob2JqLnByZXZpZXdBcnJvd3NBdXRvSGlkZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHJldmlld1N3aXBlID0gdXNlKG9iai5wcmV2aWV3U3dpcGUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnByZXZpZXdGdWxsc2NyZWVuID0gdXNlKG9iai5wcmV2aWV3RnVsbHNjcmVlbiwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0ZvcmNlRnVsbHNjcmVlbiA9IHVzZShvYmoucHJldmlld0ZvcmNlRnVsbHNjcmVlbiwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0Nsb3NlT25DbGljayA9IHVzZShvYmoucHJldmlld0Nsb3NlT25DbGljaywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0Nsb3NlT25Fc2MgPSB1c2Uob2JqLnByZXZpZXdDbG9zZU9uRXNjLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3S2V5Ym9hcmROYXZpZ2F0aW9uID0gdXNlKG9iai5wcmV2aWV3S2V5Ym9hcmROYXZpZ2F0aW9uLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3QW5pbWF0aW9uID0gdXNlKG9iai5wcmV2aWV3QW5pbWF0aW9uLCB0cnVlKTtcclxuICAgICAgICB0aGlzLnByZXZpZXdBdXRvUGxheSA9IHVzZShvYmoucHJldmlld0F1dG9QbGF5LCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3QXV0b1BsYXlJbnRlcnZhbCA9IHVzZShvYmoucHJldmlld0F1dG9QbGF5SW50ZXJ2YWwsIDIwMDApO1xyXG4gICAgICAgIHRoaXMucHJldmlld0F1dG9QbGF5UGF1c2VPbkhvdmVyID0gdXNlKG9iai5wcmV2aWV3QXV0b1BsYXlQYXVzZU9uSG92ZXIsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnByZXZpZXdJbmZpbml0eU1vdmUgPSB1c2Uob2JqLnByZXZpZXdJbmZpbml0eU1vdmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnByZXZpZXdab29tID0gdXNlKG9iai5wcmV2aWV3Wm9vbSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHJldmlld1pvb21TdGVwID0gdXNlKG9iai5wcmV2aWV3Wm9vbVN0ZXAsIDAuMSk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3Wm9vbU1heCA9IHVzZShvYmoucHJldmlld1pvb21NYXgsIDIpO1xyXG4gICAgICAgIHRoaXMucHJldmlld1pvb21NaW4gPSB1c2Uob2JqLnByZXZpZXdab29tTWluLCAwLjUpO1xyXG4gICAgICAgIHRoaXMucHJldmlld1JvdGF0ZSA9IHVzZShvYmoucHJldmlld1JvdGF0ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucHJldmlld0Rvd25sb2FkID0gdXNlKG9iai5wcmV2aWV3RG93bmxvYWQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnByZXZpZXdDdXN0b20gPSB1c2Uob2JqLnByZXZpZXdDdXN0b20sIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgdGhpcy5wcmV2aWV3QnVsbGV0cyA9IHVzZShvYmoucHJldmlld0J1bGxldHMsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgdGhpcy5hcnJvd1ByZXZJY29uID0gdXNlKG9iai5hcnJvd1ByZXZJY29uLCAnZmEgZmEtYXJyb3ctY2lyY2xlLWxlZnQnKTtcclxuICAgICAgICB0aGlzLmFycm93TmV4dEljb24gPSB1c2Uob2JqLmFycm93TmV4dEljb24sICdmYSBmYS1hcnJvdy1jaXJjbGUtcmlnaHQnKTtcclxuICAgICAgICB0aGlzLmNsb3NlSWNvbiA9IHVzZShvYmouY2xvc2VJY29uLCAnZmEgZmEtdGltZXMtY2lyY2xlJyk7XHJcbiAgICAgICAgdGhpcy5mdWxsc2NyZWVuSWNvbiA9IHVzZShvYmouZnVsbHNjcmVlbkljb24sICdmYSBmYS1hcnJvd3MtYWx0Jyk7XHJcbiAgICAgICAgdGhpcy5zcGlubmVySWNvbiA9IHVzZShvYmouc3Bpbm5lckljb24sICdmYSBmYS1zcGlubmVyIGZhLXB1bHNlIGZhLTN4IGZhLWZ3Jyk7XHJcbiAgICAgICAgdGhpcy56b29tSW5JY29uID0gdXNlKG9iai56b29tSW5JY29uLCAnZmEgZmEtc2VhcmNoLXBsdXMnKTtcclxuICAgICAgICB0aGlzLnpvb21PdXRJY29uID0gdXNlKG9iai56b29tT3V0SWNvbiwgJ2ZhIGZhLXNlYXJjaC1taW51cycpO1xyXG4gICAgICAgIHRoaXMucm90YXRlTGVmdEljb24gPSB1c2Uob2JqLnJvdGF0ZUxlZnRJY29uLCAnZmEgZmEtdW5kbycpO1xyXG4gICAgICAgIHRoaXMucm90YXRlUmlnaHRJY29uID0gdXNlKG9iai5yb3RhdGVSaWdodEljb24sICdmYSBmYS1yZXBlYXQnKTtcclxuICAgICAgICB0aGlzLmRvd25sb2FkSWNvbiA9IHVzZShvYmouZG93bmxvYWRJY29uLCAnZmEgZmEtYXJyb3ctY2lyY2xlLWRvd24nKTtcclxuXHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmouYWN0aW9ucyAmJiBvYmouYWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb2JqLmFjdGlvbnMgPSBvYmouYWN0aW9ucy5tYXAoYWN0aW9uID0+IG5ldyBOZ3hHYWxsZXJ5QWN0aW9uKGFjdGlvbikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmFjdGlvbnMgPSB1c2Uob2JqLmFjdGlvbnMsIFtdKTtcclxuICAgIH1cclxufVxyXG4iXX0=